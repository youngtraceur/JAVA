import java.util.ArrayList;
import java.util.List;

// Interfaz Parametros
interface Parametros {
    double IVA = 0.19;
    double DESCUENTO_AUTOMOVIL = 0.05;
    double DESCUENTO_MOTOCICLETA = 0.10;

    double totalDelIVA();

    double obtenerDescuento();
}

// Clase Vehiculo (superclase abstracta)
abstract class Vehiculo implements Parametros {
    protected String patente;
    protected String marca;
    protected String color;
    protected double costoNetoDeServicios;

    public Vehiculo(String patente, String marca, String color, double costoNetoDeServicios) {
        this.patente = patente;
        this.marca = marca;
        this.color = color;
        this.costoNetoDeServicios = costoNetoDeServicios;
    }

    public abstract void imprimirBoleta();

    public String getPatente() {
        return patente;
    }
}

// Clase Automovil (subclase)
class Automovil extends Vehiculo {
    private int cantidadPuertas;
    private int capacidadMaletero;

    public Automovil(String patente, String marca, String color, double costoNetoDeServicios, int cantidadPuertas, int capacidadMaletero) {
        super(patente, marca, color, costoNetoDeServicios);
        this.cantidadPuertas = cantidadPuertas;
        this.capacidadMaletero = capacidadMaletero;
    }

    @Override
    public void imprimirBoleta() {
        double iva = totalDelIVA();
        double descuento = obtenerDescuento();
        double totalAPagar = costoNetoDeServicios + iva - descuento;

        System.out.println("Boleta para Automovil:");
        System.out.println("Patente: " + patente);
        System.out.println("Marca: " + marca);
        System.out.println("Color: " + color);
        System.out.println("Costo Neto de Servicios: " + costoNetoDeServicios);
        System.out.println("Cantidad de Puertas: " + cantidadPuertas);
        System.out.println("Capacidad del Maletero: " + capacidadMaletero);
        System.out.println("IVA: " + iva);
        System.out.println("Descuento: " + descuento);
        System.out.println("Total a Pagar: " + totalAPagar);
    }

    @Override
    public double totalDelIVA() {
        return costoNetoDeServicios * IVA;
    }

    @Override
    public double obtenerDescuento() {
        return costoNetoDeServicios * DESCUENTO_AUTOMOVIL;
    }
}

// Clase Motocicleta (subclase)
class Motocicleta extends Vehiculo {
    private String estilo;
    private double medidaManillar;

    public Motocicleta(String patente, String marca, String color, double costoNetoDeServicios, String estilo, double medidaManillar) {
        super(patente, marca, color, costoNetoDeServicios);
        this.estilo = estilo;
        this.medidaManillar = medidaManillar;
    }

    @Override
    public void imprimirBoleta() {
        double iva = totalDelIVA();
        double descuento = obtenerDescuento();
        double totalAPagar = costoNetoDeServicios + iva - descuento;

        System.out.println("Boleta para Motocicleta:");
        System.out.println("Patente: " + patente);
        System.out.println("Marca: " + marca);
        System.out.println("Color: " + color);
        System.out.println("Costo Neto de Servicios: " + costoNetoDeServicios);
        System.out.println("Estilo: " + estilo);
        System.out.println("Medida del Manillar: " + medidaManillar);
        System.out.println("IVA: " + iva);
        System.out.println("Descuento: " + descuento);
        System.out.println("Total a Pagar: " + totalAPagar);
    }

    @Override
    public double totalDelIVA() {
        return costoNetoDeServicios * IVA;
    }

    @Override
    public double obtenerDescuento() {
        return costoNetoDeServicios * DESCUENTO_MOTOCICLETA;
    }
}

// Clase RegistroVehiculos
class RegistroVehiculos {
    private List<Vehiculo> vehiculos = new ArrayList<>();

    public void ingresarVehiculo(Vehiculo vehiculo) {
        vehiculos.add(vehiculo);
    }

    public void listarVehiculos() {
        for (Vehiculo vehiculo : vehiculos) {
            vehiculo.imprimirBoleta();
            System.out.println("---------");
        }
    }

    public void eliminarVehiculo(String patente) {
        vehiculos.removeIf(vehiculo -> vehiculo.getPatente().equals(patente));
    }
}

public class Main {
    public static void main(String[] args) {
        // Crear un registro de vehículos
        RegistroVehiculos registro = new RegistroVehiculos();

        // Registrar dos vehículos y una motocicleta
        Automovil auto1 = new Automovil("ABC123", "Toyota", "Rojo", 1000, 4, 400);
        Automovil auto2 = new Automovil("XYZ789", "Honda", "Azul", 800, 2, 300);
        Motocicleta moto1 = new Motocicleta("DEF456", "Suzuki", "Negro", 500, "Deportiva", 75);

        registro.ingresarVehiculo(auto1);
        registro.ingresarVehiculo(auto2);
        registro.ingresarVehiculo(moto1);

        // Listar todos los vehículos
        registro.listarVehiculos();

        // Eliminar un vehículo por patente
        registro.eliminarVehiculo("XYZ789");

        // Listar los vehículos nuevamente después de eliminar uno
        System.out.println("Vehículos después de eliminar uno:");
        registro.listarVehiculos();
    }
}
